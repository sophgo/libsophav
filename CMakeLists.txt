cmake_minimum_required(VERSION 3.16)
project(libsophav C CXX)

list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake)
include(GitUtils)

get_version_from_tag(LIBSOPHAV_VERSION COMMIT_HASH COMMIT_COUNT BRANCH COMMIT_DATE)

add_compile_definitions(LIBSOPHAV_VERSION="${LIBSOPHAV_VERSION}")
add_compile_definitions(COMMIT_HASH="${COMMIT_HASH}")
add_compile_definitions(COMMIT_COUNT="${COMMIT_COUNT}")
add_compile_definitions(BRANCH="${BRANCH}")
add_compile_definitions(COMMIT_DATE=${COMMIT_DATE})

if(CMAKE_HOST_WIN32)
    set(WINDOWS 1)
elseif(CMAKE_HOST_APPLE)
    set(MACOS 1)
elseif(CMAKE_HOST_UNIX)
    set(LINUX 1)
endif()
cmake_policy(SET CMP0046 NEW)

# copy header from drv
if("${PLATFORM}" STREQUAL "pcie" OR "${PLATFORM}" STREQUAL "pcie_arm64")
    if(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/../../libsophon")
        set(LIBSOPHON_HEADER_DIR ${CMAKE_CURRENT_SOURCE_DIR}/../../libsophon/driver/bm1688/media/include/common/uapi/linux)

        file(COPY "${LIBSOPHON_HEADER_DIR}"
            DESTINATION "${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/osdrv_pcie")
        message(STATUS "LIBSOPHON_HEADER_DIR........ " ${LIBSOPHON_HEADER_DIR})
    else()
        message(WARNING "not find repo libsophon, use the default header")
    endif()
else()
    if(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/../../osdrv")
        set(OSDRV_HEADER_DIR ${CMAKE_CURRENT_SOURCE_DIR}/../../osdrv/interdrv/v2/include/common/uapi/linux)
        set(V4L2_HEADER_DIR ${CMAKE_CURRENT_SOURCE_DIR}/../../linux_5.10/drivers/media/platform/soph/osdrv_include/chip/cv186x/uapi/linux)

        file(COPY "${OSDRV_HEADER_DIR}"
            DESTINATION "${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/osdrv")
        file(COPY "${V4L2_HEADER_DIR}/sns_v4l2_uapi.h" "${V4L2_HEADER_DIR}/vi_v4l2_uapi.h"
            DESTINATION "${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/osdrv/linux")
        message(STATUS "OSDRV_HEADER_DIR............ " ${OSDRV_HEADER_DIR})
        message(STATUS "V4L2_HEADER_DIR............. " ${V4L2_HEADER_DIR})
    else()
        message(WARNING "not find repo cvi_osdrv, use the default header")
    endif()
endif()

# options
#set(CHIP_LIST bm1688)
#set(CHIP_NAME bm1688 CACHE STRING "chip: bm1688")
#set_property(CACHE CHIP_NAME PROPERTY STRINGS ${CHIP_LIST})
#
#set(PLATFORM_LIST soc pcie pcie_arm64 pcie_loongarch64)
#set(PLATFORM soc CACHE STRING "platform: soc pcie pcie_arm64 pcie_loongarch64")
#set_property(CACHE PLATFORM PROPERTY STRINGS ${PLATFORM_LIST})
#
#set(SUBTYPE_LIST asic palladium fpga)
#set(SUBTYPE asic CACHE STRING "subtype: asic palladium fpga")
#set_property(CACHE SUBTYPE PROPERTY STRINGS ${SUBTYPE_LIST})
#
#set(DEBUG_LIST off on)
#set(DEBUG off CACHE STRING "debug: off on")
#set_property(CACHE DEBUG PROPERTY STRINGS ${DEBUG_LIST})
#
#if("${PLATFORM}" STREQUAL "soc" OR "${PLATFORM}" STREQUAL "pcie_arm64")
#    set(CMAKE_TOOLCHAIN_FILE cmake/aarch64-gnu.toolchain.cmake)
#    #include(cmake/aarch64-gnu.toolchain.cmake)
#elseif("${PLATFORM}" STREQUAL "pcie")
#    set(CMAKE_TOOLCHAIN_FILE cmake/x86_64-gnu.toolchain.cmake)
#    #include(cmake/x86_64-gnu.toolchain.cmake)
#endif()

if ("${CMAKE_C_COMPILER}" MATCHES "aarch64-linux-gcc$")
    set(LIB_VERSION lib930)
elseif ("${CMAKE_C_COMPILER}" MATCHES "aarch64-none-linux-gnu-gcc$")
    set(LIB_VERSION lib1131)
else ()
    set(LIB_VERSION lib)
endif ()

if("${PLATFORM}" STREQUAL "pcie" OR "${PLATFORM}" STREQUAL "pcie_arm64")
    add_definitions(-DBM_PCIE_MODE)
    set(PCIE_MODE "on")
    set(LIB_VERSION lib)
endif()

if("${DEBUG}" STREQUAL "on")
    set(CMAKE_BUILD_TYPE "Debug" CACHE STRING "Choose the build type: Release Debug RelWithDebInfo MinSizeRel.")
    add_compile_options(-O0 -Wall -g -ggdb)
else()
    set(CMAKE_BUILD_TYPE "Release" CACHE STRING "Choose the build type: Release Debug RelWithDebInfo MinSizeRel.")
    add_compile_options(-O3 -Wall)
endif()

set(LIBSOPHAV_OUT_PATH ${CMAKE_CURRENT_BINARY_DIR}/release CACHE STRING "bmvid compile output location")
# set project name and version after setting cmake toolchains
set(GIT_VERSION "1.9.0")
if(NOT "${GIT_VERSION}" STREQUAL "")
    STRING(REGEX REPLACE "[\n\t\r]" "" GIT_VERSION ${GIT_VERSION})
    STRING(REGEX REPLACE "([0-9][0-9]*)\\..*" "\\1" MAJOR_VERSION ${GIT_VERSION})
    STRING(REGEX REPLACE ".*\\.([0-9][0-9]*)\\..*" "\\1" MINOR_VERSION ${GIT_VERSION})
    STRING(REGEX REPLACE ".*\\.([0-9][0-9]*).*" "\\1" PATCH_VERSION ${GIT_VERSION})
    project("libsophav" VERSION ${MAJOR_VERSION}.${MINOR_VERSION}.${PATCH_VERSION})
else()
    project("libsophav")
endif()

#if("${PLATFORM}" STREQUAL "soc" OR "${PLATFORM}" STREQUAL "pcie_arm64")
#    set(CMAKE_TOOLCHAIN_FILE cmake/aarch64-gnu.toolchain.cmake)
#    #include(cmake/aarch64-gnu.toolchain.cmake)
#elseif("${PLATFORM}" STREQUAL "pcie")
#    set(CMAKE_TOOLCHAIN_FILE cmake/x86_64-gnu.toolchain.cmake)
#    #include(cmake/x86_64-gnu.toolchain.cmake)
#endif()

message(STATUS "PROJECT..................... " ${PROJECT_NAME})
message(STATUS "VERSION..................... " ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_PATCH})
message(STATUS "CMAKE_VERSION............... " ${CMAKE_VERSION})
message(STATUS "CMAKE_BINARY_DIR............ " ${CMAKE_BINARY_DIR})
message(STATUS "CMAKE_SOURCE_DIR............ " ${CMAKE_SOURCE_DIR})
message(STATUS "CMAKE_GENERATOR............. " ${CMAKE_GENERATOR})
message(STATUS "CMAKE_C_COMPILER............ " ${CMAKE_C_COMPILER})
message(STATUS "CMAKE_CXX_COMPILER.......... " ${CMAKE_CXX_COMPILER})
message(STATUS "CMAKE_BUILD_TYPE............ " ${CMAKE_BUILD_TYPE})
message(STATUS "CMAKE_TOOLCHAIN_FILE........ " ${CMAKE_TOOLCHAIN_FILE})
message(STATUS "CMAKE_SYSTEM_PROCESSOR...... " ${CMAKE_SYSTEM_PROCESSOR})
message(STATUS "CHIP NAME................... " ${CHIP_NAME})
message(STATUS "PLATFORM.................... " ${PLATFORM})
message(STATUS "SUBTYPE..................... " ${SUBTYPE})
message(STATUS "CMAKE_INSTALL_PREFIX........ " ${CMAKE_INSTALL_PREFIX})

# add sub-modules
find_package(Sophav)
ADD_TARGET_YUV_LIB(yuv_lib ${PLATFORM} off libsophon ${LIBSOPHAV_OUT_PATH})
add_subdirectory(jpeg)
add_subdirectory(video/dec)
add_subdirectory(video/enc)
add_subdirectory(bmcv)
if(NOT "${PCIE_MODE}" STREQUAL "on")
    add_subdirectory(vo/drm)
    add_subdirectory(vglite)
    add_subdirectory(tde)
endif()
