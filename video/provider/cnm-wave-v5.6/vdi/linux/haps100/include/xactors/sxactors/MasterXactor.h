//-*- C++ -*-x
#pragma once

#include "TLMRequest.h"
#include "TLMResponse.h"
#include "XactorCore.h"
#include "sxactors/dllexport.h"

/// data type to hold response payload size and discard status
struct ResponseHandling {
  unsigned m_payload;
  bool     m_discard;
};

#ifdef _WIN32
template class DLLEXPORT WaitQueueT<ResponseHandling>;
#endif

/**
 * @brief Master Transactor: sends TLM requests; recevies TLM responses.
 *
 * This xactor is the host side of a client master xactor. It sesnds
 * TLMRequests to the client and reveives TLMResponses. Templates are
 * used to address width (bits), data size width (bits), and the user
 * data bit width (0,32, or 64). All parameters must match the actual
 * hardware instantiation.
 *
 * @param ADDRSIZE   The AMBA address width
 * @param DATASIZE   The AMBA data width
 * @param USERDSIZE  The AMBA user data width
 */
template<unsigned int ADDRSIZE=32, unsigned int DATASIZE=32, unsigned int USERDSIZE=0>
class DLLEXPORT MasterXactor : public XactorCore {

private:
  /// Local queue to understand what to expect from the response
  WaitQueueT<ResponseHandling>  m_responseQ;
  /// reporting level for messages generated by xactor
  XactorMsgLevelType m_requestCheckLevel;

public:
  /**
   * @brief  Constructor for UMRBus-based client.
   *
   * @param name -- symbolic name
   * @param device -- umr device number
   * @param bus -- umr bus number
   * @param address -- umr bus address
   */
  MasterXactor(const std::string &name, unsigned int device, unsigned int bus, unsigned int address);

  /**
   * @brief Constructor for SceMi based client.
   *
   * @param name -- symbolic name
   * @param path -- scemi path, in params file
   */
  MasterXactor(const std::string &name, const std::string &path);

  /**
   * @brief  Blocking send method.
   * This methods blocks until the Request has been
   * successfully passed to the xactor
   *
   * @param req -- the TLMRequest to be sent
   * @param discardResponse -- indicates if the reponse is will be discard (usually for write requests)
   */
  void send (const TLMRequest<ADDRSIZE,DATASIZE,USERDSIZE > &req, bool discardResponse = false) ;

  /**
   * @brief  Non-blocking send.
   *
   * This method sends the Request if the xactor can accept its.
   * @param req -- the TLMRequest to be sent
   * @param discardResponse -- indicates if the reponse is will be discard (usually for write requests)
   * @return  returns true if the Request has been sent
   */
  bool sendNB (const TLMRequest<ADDRSIZE,DATASIZE,USERDSIZE > &req, bool discardResponse = false);

  /**
   * @brief Timed-blocking send.
   *
   * This method tries to send the request but will timeout if the
   * request has not been sent within delta time.
   *
   * @param   req -- the TLMRequest to be sent
   * @param   seconds -- timeout delay in seconds
   * @param   microseconds -- delay in micro-seconds
   * @param   discardResponse -- indicates if the reponse is will be discard (usually for write requests)
   * @return  true if the Request has been sent, false if a timeout occurred.
   */
  bool sendT (const TLMRequest<ADDRSIZE,DATASIZE,USERDSIZE > &req, const time_t seconds, const long microseconds=0, bool discardResponse = false);

  /**
   * @brief Timed-blocking send.
   *
   * This method tries to send the request but will timeout if the
   * request has not been sent within delta time.
   *
   * @param   req -- the TLMRequest to be sent
   * @param   expiration -- absolute time for the timeout
   * @param   discardResponse -- indicates if the reponse is will be discard (usually for write requests)
   * @return  returns true if the Request has been sent, false if a timeout occurred.
   */
  bool sendT (const TLMRequest<ADDRSIZE,DATASIZE,USERDSIZE > &req, struct timespec &expiration, bool discardResponse = false);

  /**
   * @brief Blocking receive.
   *
   * This method blocks until a response is received from the xactor.
   *
   * @param resp -- the TLMResponse received (this is populated by this call.)
   */
  void receive (TLMResponse<DATASIZE,USERDSIZE > &resp) ;

  /**
   * @brief Non-Blocking receive.
   *
   * This method checks if a response is available from the xactor
   * and returns it if it is.
   *
   * @param resp -- the TLMResponse received (this is populated by this call.)
   * @return  returns true if the Response has been received
   */
  bool receiveNB (TLMResponse<DATASIZE,USERDSIZE > &resp) ;

  /**
   * @brief Timed-Blocking receive.
   *
   * This method attempts to retrieve a message from the xactor,
   * blocking until the message is received or the timeout expires.
   *
   * @param resp -- the TLMResponse received (this is populated by this call.)
   * @param seconds -- timeout delay in seconds
   * @param microseconds -- delay in micro-seconds
   * @return  returns true if the Response has been received, false if a timeout occurred.
   */
  bool receiveT (TLMResponse<DATASIZE,USERDSIZE > &resp, const time_t seconds, const long microseconds=0) ;

  /**
   * @brief Timed-Blocking receive.
   *
   * This method attempts to retrieve a message from the xactor,
   * blocking until the message is received or the timeout expires.
   *
   * @param resp -- the TLMResponse received (this is populated by this call.)
   * @param expiration -- absolute time for the timeout
   * @return  returns true if the Response has been received, false if a timeout occurred.
   */
  bool receiveT (TLMResponse<DATASIZE,USERDSIZE > &resp, struct timespec &expiration) ;

  /**
   * @brief Synchronous send/receive method.
   *
   *  This method blocks until the request is sent and  a response is
   *  received from the xactor.
   *
   * @param req -- the TLMRequest to be sent
   * @param resp -- the TLMResponse received (this is populated by this call.)
   */
  void send (const TLMRequest<ADDRSIZE,DATASIZE,USERDSIZE > &req, TLMResponse<DATASIZE,USERDSIZE > &resp);

  /**
   * @brief  Synchronous send/receive method.
   *
   *  This method blocks until the request is sent and  a response is
   *  received from the xactor.
   *
   * @param req -- the TLMRequest to be sent
   * @param resp -- the TLMResponse received (this is populated by this call.)
   *
   * @param seconds -- timeout delay in seconds
   * @param microseconds -- delay in micro-seconds
   * @return  returns true if the request has been sent and response has been received
   */
  bool sendT (const TLMRequest<ADDRSIZE,DATASIZE,USERDSIZE > &req, TLMResponse<DATASIZE,USERDSIZE > &resp, const time_t seconds, const long microseconds=0);

  /**
   * @brief Indicates if a Response can be received.
   *
   * This method determines if a full TLMResponse is available and returns 1,
   * 0 otherwise.  Unlike the XactorCore version, this does not return the full
   * count of data
   */
  virtual size_t canReceive ();

  /**
   * @brief Check the given request to see if it complies with the bus frabric of the transactor.
   *
   * @param req -- the request to check
   * @return returns true if the checks passed or were disabled
   */
  bool checkTLMRequest (const TLMRequest<ADDRSIZE,DATASIZE,USERDSIZE > &req);

private:
  /// disabled copy constructor
  MasterXactor (const MasterXactor &);
  /// disabled copy constructor
  MasterXactor & operator= (const MasterXactor &);

protected:
  /// Utility function to locally store information about this request
  void queueExpectedResponse( const TLMRequest<ADDRSIZE, DATASIZE, USERDSIZE> & req, bool discard=false );

};
