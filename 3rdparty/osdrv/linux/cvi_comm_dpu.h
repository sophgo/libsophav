#ifndef _CVI_COMM_DPU_H_
#define _CVI_COMM_DPU_H_
#include <linux/cvi_common.h>
#include <linux/cvi_defines.h>
#include <linux/cvi_comm_video.h>
// #include <linux/module.h>
// #include "linux/kernel.h"
// #include <linux/kthread.h>
// #include <linux/miscdevice.h>
// #include <linux/spinlock.h>
// #include <linux/wait.h>
// #include <linux/mutex.h>
// #include <linux/types.h>
// #include <linux/timex.h>
// #include <stdio.h>
#undef ARRAY_SIZE
#define ARRAY_SIZE(x)	(sizeof(x) / sizeof((x)[0]))


#define uartlog(fmt, args...) \
{ \
    printf(fmt, ##args); \
    fflush(stdout); \
}
// typedef signed char             int8_t;
// typedef signed short            int16_t;
// typedef signed int              int32_t;
// typedef long long 		        int64_t;
// typedef unsigned char           uint8_t;
// typedef unsigned short          uint16_t;
// typedef unsigned int            uint32_t;
// typedef unsigned long long      uint64_t;
// typedef uint8_t                 CVI_U8;
// typedef uint8_t                 CVI_UCHAR;
// typedef uint16_t                CVI_U16;
// typedef uint32_t                CVI_U32;
// typedef int8_t                  CVI_S8;
// typedef int16_t                 CVI_S16;
// typedef int32_t                 CVI_S32;
// typedef uint64_t                CVI_U64;
// typedef int64_t                 CVI_S64;
// typedef char                    CVI_CHAR;
// typedef unsigned long long int	uintptr_t;
typedef CVI_U64 DPU_HANLDE;
// typedef CVI_U32 DPU_GRP;
// typedef CVI_U32 DPU_CHN;

typedef enum _DPU_DISP_RANGE_E{
	DPU_DISP_RANGE_DEFAULT = 0x0,
	DPU_DISP_RANGE_16     = 0x1,
	DPU_DISP_RANGE_32     = 0x2,
	DPU_DISP_RANGE_48     = 0x3,
	DPU_DISP_RANGE_64     = 0x4,
	DPU_DISP_RANGE_80     = 0x5,
	DPU_DISP_RANGE_96     = 0x6,
	DPU_DISP_RANGE_112    = 0x7,
	DPU_DISP_RANGE_128    = 0x8,
	DPU_DISP_RANGE_BUTT
}DPU_DISP_RANGE_E;

typedef enum _DPU_MASK_MODE_E{
	DPU_MASK_MODE_DEFAULT = 0x0,
	DPU_MASK_MODE_1x1     = 0x1,
	DPU_MASK_MODE_3x3     = 0x2,
	DPU_MASK_MODE_5x5     = 0x3,
	DPU_MASK_MODE_7x7     = 0x4,
	DPU_MASK_MODE_BUTT
}DPU_MASK_MODE_E;

typedef enum _DPU_DEPTH_UNIT_E{
	DPU_DEPTH_UNIT_DEFAULT = 0x0,
	DPU_DEPTH_UNIT_MM      = 0x1,
	DPU_DEPTH_UNIT_CM      = 0x2,
	DPU_DEPTH_UNIT_DM      = 0x3,
	DPU_DEPTH_UNIT_M       = 0x4,
	DPU_DEPTH_UNIT_BUTT
}DPU_DEPTH_UNIT_E;

typedef enum _DPU_DCC_DIR_E{
	DPU_DCC_DIR_DEFAULT  = 0x0,
	DPU_DCC_DIR_A12      = 0x1,
	DPU_DCC_DIR_A13      = 0x2,
	DPU_DCC_DIR_A14      = 0x3,
	DPU_DCC_DIR_BUTT
}DPU_DCC_DIR_E;

typedef enum _DPU_MODE_E{
	DPU_MODE_DEFAULT = 0x0,               //only sgbm,u8 disp out(no post process),16 align
	DPU_MODE_SGBM_MUX0 = 0x1,			  //only sgbm,u8 disp out(no post process),16 align
	DPU_MODE_SGBM_MUX1 = 0x2,			  //only sgbm,u16 disp out(post process),16 align
	DPU_MODE_SGBM_MUX2 = 0x3,			  //only sgbm,u8 disp out(post process),16 align
	DPU_MODE_SGBM_FGS_ONLINE_MUX0 = 0x4,  //sgbm 2 fgs online, fgs u8 disp out,16 align
	DPU_MODE_SGBM_FGS_ONLINE_MUX1 = 0x5,  //sgbm 2 fgs online, fgs u16 depth out,32 align
	DPU_MODE_SGBM_FGS_ONLINE_MUX2 = 0x6,  //sgbm 2 fgs online, sgbm u16 depth out,32 align
	DPU_MODE_FGS_MUX0 = 0x7,              //only fgs, u8 disp out,16 align
	DPU_MODE_FGS_MUX1 = 0x8,			  //only fgs, u16 depth out,32 align
	//DPU_MODE_FGS_MUX2 = 0xA,			  //only fgs, u16 depth out bypass fgs,32 align
	DPU_MODE_BUTT
}DPU_MODE_E;

// typedef enum CVI_DPU_INTR_STATE_E{
// 	DPU_INTR_STATE_DONE = 0x0,
// 	DPU_INTR_STATE_OTHERS = 0x1,
// 	DPU_INTR_STATE_BUTT
// }DPU_INTR_STATE_E;

// struct DPU_JOB_QUEUE_STATUS_S{
// 	CVI_U32 BusyNum ; //numbers of busy nodes
// 	CVI_U32 FreeNum ; //numbers of free nodes
// };

// struct DPU_GRP_WORK_STATUS_S {
// 	CVI_U8 GrpID;
// 	CVI_U32 FrameRate;   		// Output frame rate
// 	CVI_U32 StartCnt;    		//Number of times of task startup
// 	CVI_U32 StartFailCnt; 		//Number of times of task startup failure
// 	CVI_U32 SendPicCnt;  		//Number of times of successful image transmission
// 	CVI_U32 CurTaskCostTm; 		//Time taken to complete the current task
// 	CVI_U32 MaxTaskCostTm; 		//Historical maximum time taken to complete a task
// };

// struct DPU_RUN_TIME_INFO_S {
// 	CVI_S32 CntPerSec; 			//Number of interrupts performed in the last second
// 	CVI_U32 MaxCntPerSec; 		//Historical maximum number of interrupts performed in one second
// 	CVI_U32 TotalIntCntLastSec; //Number of interrupts reported in the last second
// 	CVI_U32 TotalIntCnt; 		//Number of interrupts generated by the DPU
// 	CVI_U32 CostTm;      		//Time taken to performed the last interrupt /us
// 	CVI_U32 MCostTm;      		//Maximum time taken to performed the last interrupt /us
// 	CVI_U32 CostTmPerSec;      	//Time taken to performed in the last interrupt /us
// 	CVI_U32 MCostTmPerSec;      //Maximum time taken to performed in the last interrupt /us
// 	CVI_U32 TotalIntCostTm;     //Total time taken to performed all the interrupt /us
// 	CVI_U32 CostTmPerFrm;     	//Time taken to process a single frame of image  /us
// 	CVI_U32 HwCostTmPerFrm;     //Time taken by the hardware to process a single frame of image
// 	CVI_U64 RunTm;              //Total running time of DPU /s
// };

typedef struct _DPU_GRP_ATTR_S {

	SIZE_S stLeftImageSize;           //minSIze(64*64) maxSize(1920*1080)
	SIZE_S stRightImageSize;
	DPU_MODE_E enDpuMode;
	DPU_MASK_MODE_E enMaskMode;
	DPU_DISP_RANGE_E enDispRange;
	CVI_U16 u16DispStartPos;          // [0,WIDTH)
	CVI_U32 u32Rshift1;               // [0,7]
	CVI_U32 u32Rshift2;				  // [0,7]
	CVI_U32 u32CaP1;                  // [0,65535]
	CVI_U32 u32CaP2;				  // [0,65535]
	CVI_U32 u32UniqRatio;             // [0,100]
	CVI_U32 u32DispShift;			  // [0,15]
	CVI_U32 u32CensusShift;           // [0,255]
	CVI_U32 u32FxBaseline;            // [0,1048575]
	DPU_DCC_DIR_E enDccDir;
	CVI_U32 u32FgsMaxCount;			  // [0,31]
	CVI_U32 u32FgsMaxT;               // [0,127]
	DPU_DEPTH_UNIT_E enDpuDepthUnit;
	CVI_BOOL bIsBtcostOut;            // [0,1]
	CVI_BOOL bNeedSrcFrame;
	FRAME_RATE_CTRL_S stFrameRate;

} DPU_GRP_ATTR_S;

typedef struct _DPU_CHN_ATTR_S {
	SIZE_S stImgSize;
} DPU_CHN_ATTR_S;

// struct DPU_CHN_CFG {
// 	CVI_BOOL isEnabled;
// 	CVI_BOOL isMuted;
// 	DPU_CHN_ATTR_S stChnAttr;
// 	PIXEL_FORMAT_E enPixelFormat;
// 	CVI_U32 blk_size;
// 	CVI_U32 align;
// 	CVI_U32 VbPool;
// 	CVI_U32 stride;
// 	CVI_BOOL is_cfg_changed;
// };

// struct cvi_dpu_ctx {
// 	CVI_BOOL isCreated;
// 	CVI_BOOL isStarted;
// 	DPU_GRP_ATTR_S stGrpAttr;
// 	struct DPU_CHN_CFG stChnCfgs[DPU_MAX_CHN_NUM];
// 	struct mutex lock;
// 	struct DPU_GRP_WORK_STATUS_S stGrpWorkStatus;
// 	CVI_U32 grp_state;
// 	CVI_U8 u8DpuDev;
// 	CVI_BOOL is_dma_cfg;
// 	CVI_U32 u32Stride[2];
// 	CVI_U32 chnNum;
// 	PIXEL_FORMAT_E enPixelFormat;
// 	struct DPU_JOB_QUEUE_STATUS_S stInputJobStatus;
// 	struct DPU_JOB_QUEUE_STATUS_S stWorkingJobStatus;
// 	struct DPU_JOB_QUEUE_STATUS_S stOutputJobStatus;

// 	CVI_S32 frameNum;
// 	CVI_S32 costTimeForSec;
// };

// struct cvi_dpu_dev {
// 	struct miscdevice miscdev;
// 	spinlock_t lock;
// 	struct mutex mutex;
// 	unsigned int irq_num;
// 	struct clk *clk_sys[1];
// 	CVI_U32 clk_sys1_freq;
// 	void *shared_mem;
// 	wait_queue_head_t wait;
// 	wait_queue_head_t reset_wait;
// 	CVI_BOOL reset_done;
// 	struct task_struct *thread;
// 	struct DPU_RUN_TIME_INFO_S stRunTimeInfo;
// 	struct timespec64 timeTotalForSec;
// 	CVI_U32 timeForSec;
// 	CVI_U32 IntNumPerSec;
// 	struct timespec64 timeStart;
// 	CVI_U32 timeEnd;
// 	CVI_U32 costTimeForSec ;
// 	CVI_U32 IntTimePerSec;
// };

#endif